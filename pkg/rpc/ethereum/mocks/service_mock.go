// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_ethereum_rpc is a generated GoMock package.
package mock_ethereum_rpc

import (
	context "context"
	big "math/big"
	ethereum_rpc "nn-blockchain-api/pkg/rpc/ethereum"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// CreateTransaction mocks base method.
func (m *MockService) CreateTransaction(ctx context.Context, fromAddress, toAddress string, amount float64, network string) (*string, *float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTransaction", ctx, fromAddress, toAddress, amount, network)
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(*float64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateTransaction indicates an expected call of CreateTransaction.
func (mr *MockServiceMockRecorder) CreateTransaction(ctx, fromAddress, toAddress, amount, network interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTransaction", reflect.TypeOf((*MockService)(nil).CreateTransaction), ctx, fromAddress, toAddress, amount, network)
}

// EstimateGas mocks base method.
func (m *MockService) EstimateGas(ctx context.Context, fromAddress, toAddress, data string, value, gasPrice *big.Int, network string) (*string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EstimateGas", ctx, fromAddress, toAddress, data, value, gasPrice, network)
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EstimateGas indicates an expected call of EstimateGas.
func (mr *MockServiceMockRecorder) EstimateGas(ctx, fromAddress, toAddress, data, value, gasPrice, network interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EstimateGas", reflect.TypeOf((*MockService)(nil).EstimateGas), ctx, fromAddress, toAddress, data, value, gasPrice, network)
}

// GetNetworkId mocks base method.
func (m *MockService) GetNetworkId(ctx context.Context, network string) (*big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkId", ctx, network)
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkId indicates an expected call of GetNetworkId.
func (mr *MockServiceMockRecorder) GetNetworkId(ctx, network interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkId", reflect.TypeOf((*MockService)(nil).GetNetworkId), ctx, network)
}

// GetTransactionByHash mocks base method.
func (m *MockService) GetTransactionByHash(ctx context.Context, tx, network string) (*ethereum_rpc.TransactionByHashResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionByHash", ctx, tx, network)
	ret0, _ := ret[0].(*ethereum_rpc.TransactionByHashResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionByHash indicates an expected call of GetTransactionByHash.
func (mr *MockServiceMockRecorder) GetTransactionByHash(ctx, tx, network interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionByHash", reflect.TypeOf((*MockService)(nil).GetTransactionByHash), ctx, tx, network)
}

// PendingNonceAt mocks base method.
func (m *MockService) PendingNonceAt(ctx context.Context, account, network string) (*string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PendingNonceAt", ctx, account, network)
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PendingNonceAt indicates an expected call of PendingNonceAt.
func (mr *MockServiceMockRecorder) PendingNonceAt(ctx, account, network interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PendingNonceAt", reflect.TypeOf((*MockService)(nil).PendingNonceAt), ctx, account, network)
}

// SendTransaction mocks base method.
func (m *MockService) SendTransaction(ctx context.Context, signedTx, network string) (*string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendTransaction", ctx, signedTx, network)
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendTransaction indicates an expected call of SendTransaction.
func (mr *MockServiceMockRecorder) SendTransaction(ctx, signedTx, network interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendTransaction", reflect.TypeOf((*MockService)(nil).SendTransaction), ctx, signedTx, network)
}

// SignTransaction mocks base method.
func (m *MockService) SignTransaction(ctx context.Context, tx, privateKey, network string) (*string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignTransaction", ctx, tx, privateKey, network)
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignTransaction indicates an expected call of SignTransaction.
func (mr *MockServiceMockRecorder) SignTransaction(ctx, tx, privateKey, network interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignTransaction", reflect.TypeOf((*MockService)(nil).SignTransaction), ctx, tx, privateKey, network)
}

// Status mocks base method.
func (m *MockService) Status(ctx context.Context, network string) (*ethereum_rpc.StatusNodeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Status", ctx, network)
	ret0, _ := ret[0].(*ethereum_rpc.StatusNodeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Status indicates an expected call of Status.
func (mr *MockServiceMockRecorder) Status(ctx, network interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockService)(nil).Status), ctx, network)
}

// SuggestGasPrice mocks base method.
func (m *MockService) SuggestGasPrice(ctx context.Context, network string) (*string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SuggestGasPrice", ctx, network)
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SuggestGasPrice indicates an expected call of SuggestGasPrice.
func (mr *MockServiceMockRecorder) SuggestGasPrice(ctx, network interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SuggestGasPrice", reflect.TypeOf((*MockService)(nil).SuggestGasPrice), ctx, network)
}
