// Code generated by MockGen. DO NOT EDIT.
// Source: client.go

// Package mock_rpc_bitcoin is a generated GoMock package.
package mock_rpc_bitcoin

import (
	bytes "bytes"
	context "context"
	io "io"
	http "net/http"
	rpc_bitcoin "nn-blockchain-api/pkg/rpc/bitcoin"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// EncodeBaseRequest mocks base method.
func (m *MockClient) EncodeBaseRequest(request rpc_bitcoin.BaseRequest) (*bytes.Buffer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EncodeBaseRequest", request)
	ret0, _ := ret[0].(*bytes.Buffer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EncodeBaseRequest indicates an expected call of EncodeBaseRequest.
func (mr *MockClientMockRecorder) EncodeBaseRequest(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EncodeBaseRequest", reflect.TypeOf((*MockClient)(nil).EncodeBaseRequest), request)
}

// Send mocks base method.
func (m *MockClient) Send(ctx context.Context, body io.Reader, walletId, network string) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", ctx, body, walletId, network)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Send indicates an expected call of Send.
func (mr *MockClientMockRecorder) Send(ctx, body, walletId, network interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockClient)(nil).Send), ctx, body, walletId, network)
}
