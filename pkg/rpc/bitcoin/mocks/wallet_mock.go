// Code generated by MockGen. DO NOT EDIT.
// Source: wallet.go

// Package mock_bitcoin is a generated GoMock package.
package mock_bitcoin

import (
	bitcoin "nn-blockchain-api/pkg/rpc/bitcoin"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockWalletService is a mock of WalletService interface.
type MockWalletService struct {
	ctrl     *gomock.Controller
	recorder *MockWalletServiceMockRecorder
}

// MockWalletServiceMockRecorder is the mock recorder for MockWalletService.
type MockWalletServiceMockRecorder struct {
	mock *MockWalletService
}

// NewMockWalletService creates a new mock instance.
func NewMockWalletService(ctrl *gomock.Controller) *MockWalletService {
	mock := &MockWalletService{ctrl: ctrl}
	mock.recorder = &MockWalletServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWalletService) EXPECT() *MockWalletServiceMockRecorder {
	return m.recorder
}

// CreateWallet mocks base method.
func (m *MockWalletService) CreateWallet(network string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWallet", network)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWallet indicates an expected call of CreateWallet.
func (mr *MockWalletServiceMockRecorder) CreateWallet(network interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWallet", reflect.TypeOf((*MockWalletService)(nil).CreateWallet), network)
}

// ImportAddress mocks base method.
func (m *MockWalletService) ImportAddress(address, walletId, network string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportAddress", address, walletId, network)
	ret0, _ := ret[0].(error)
	return ret0
}

// ImportAddress indicates an expected call of ImportAddress.
func (mr *MockWalletServiceMockRecorder) ImportAddress(address, walletId, network interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportAddress", reflect.TypeOf((*MockWalletService)(nil).ImportAddress), address, walletId, network)
}

// ListUnspent mocks base method.
func (m *MockWalletService) ListUnspent(address, walletId, network string) ([]*bitcoin.Unspent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUnspent", address, walletId, network)
	ret0, _ := ret[0].([]*bitcoin.Unspent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUnspent indicates an expected call of ListUnspent.
func (mr *MockWalletServiceMockRecorder) ListUnspent(address, walletId, network interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUnspent", reflect.TypeOf((*MockWalletService)(nil).ListUnspent), address, walletId, network)
}

// LoadWallet mocks base method.
func (m *MockWalletService) LoadWallet(walletId, network string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadWallet", walletId, network)
	ret0, _ := ret[0].(error)
	return ret0
}

// LoadWallet indicates an expected call of LoadWallet.
func (mr *MockWalletServiceMockRecorder) LoadWallet(walletId, network interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadWallet", reflect.TypeOf((*MockWalletService)(nil).LoadWallet), walletId, network)
}

// RescanWallet mocks base method.
func (m *MockWalletService) RescanWallet(walletId, network string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RescanWallet", walletId, network)
	ret0, _ := ret[0].(error)
	return ret0
}

// RescanWallet indicates an expected call of RescanWallet.
func (mr *MockWalletServiceMockRecorder) RescanWallet(walletId, network interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RescanWallet", reflect.TypeOf((*MockWalletService)(nil).RescanWallet), walletId, network)
}

// WalletInfo mocks base method.
func (m *MockWalletService) WalletInfo(walletId, network string) (*bitcoin.Info, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WalletInfo", walletId, network)
	ret0, _ := ret[0].(*bitcoin.Info)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WalletInfo indicates an expected call of WalletInfo.
func (mr *MockWalletServiceMockRecorder) WalletInfo(walletId, network interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WalletInfo", reflect.TypeOf((*MockWalletService)(nil).WalletInfo), walletId, network)
}
