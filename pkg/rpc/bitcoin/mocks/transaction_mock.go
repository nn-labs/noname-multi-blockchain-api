// Code generated by MockGen. DO NOT EDIT.
// Source: transaction.go

// Package mock_bitcoin is a generated GoMock package.
package mock_bitcoin

import (
	bitcoin "nn-blockchain-api/pkg/rpc/bitcoin"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockTransactionService is a mock of TransactionService interface.
type MockTransactionService struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionServiceMockRecorder
}

// MockTransactionServiceMockRecorder is the mock recorder for MockTransactionService.
type MockTransactionServiceMockRecorder struct {
	mock *MockTransactionService
}

// NewMockTransactionService creates a new mock instance.
func NewMockTransactionService(ctrl *gomock.Controller) *MockTransactionService {
	mock := &MockTransactionService{ctrl: ctrl}
	mock.recorder = &MockTransactionServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionService) EXPECT() *MockTransactionServiceMockRecorder {
	return m.recorder
}

// CreateTransaction mocks base method.
func (m *MockTransactionService) CreateTransaction(utxos bitcoin.UTXO, fromAddress, toAddress string, amount int64, network string) (*string, *float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTransaction", utxos, fromAddress, toAddress, amount, network)
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(*float64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateTransaction indicates an expected call of CreateTransaction.
func (mr *MockTransactionServiceMockRecorder) CreateTransaction(utxos, fromAddress, toAddress, amount, network interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTransaction", reflect.TypeOf((*MockTransactionService)(nil).CreateTransaction), utxos, fromAddress, toAddress, amount, network)
}

// DecodeTransaction mocks base method.
func (m *MockTransactionService) DecodeTransaction(tx, network string) (*bitcoin.DecodedTx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecodeTransaction", tx, network)
	ret0, _ := ret[0].(*bitcoin.DecodedTx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DecodeTransaction indicates an expected call of DecodeTransaction.
func (mr *MockTransactionServiceMockRecorder) DecodeTransaction(tx, network interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecodeTransaction", reflect.TypeOf((*MockTransactionService)(nil).DecodeTransaction), tx, network)
}

// FundForTransaction mocks base method.
func (m *MockTransactionService) FundForTransaction(createdTx, changeAddress, network string) (string, *float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FundForTransaction", createdTx, changeAddress, network)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(*float64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FundForTransaction indicates an expected call of FundForTransaction.
func (mr *MockTransactionServiceMockRecorder) FundForTransaction(createdTx, changeAddress, network interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FundForTransaction", reflect.TypeOf((*MockTransactionService)(nil).FundForTransaction), createdTx, changeAddress, network)
}

// SendTransaction mocks base method.
func (m *MockTransactionService) SendTransaction(signedTx, network string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendTransaction", signedTx, network)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendTransaction indicates an expected call of SendTransaction.
func (mr *MockTransactionServiceMockRecorder) SendTransaction(signedTx, network interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendTransaction", reflect.TypeOf((*MockTransactionService)(nil).SendTransaction), signedTx, network)
}

// SignTransaction mocks base method.
func (m *MockTransactionService) SignTransaction(tx, privateKey string, utxos []map[string]interface{}, network string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignTransaction", tx, privateKey, utxos, network)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignTransaction indicates an expected call of SignTransaction.
func (mr *MockTransactionServiceMockRecorder) SignTransaction(tx, privateKey, utxos, network interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignTransaction", reflect.TypeOf((*MockTransactionService)(nil).SignTransaction), tx, privateKey, utxos, network)
}
