// Code generated by MockGen. DO NOT EDIT.
// Source: config.go

// Package mock_logger is a generated GoMock package.
package mock_logger

import (
	logger "nn-blockchain-api/pkg/logger"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockConfig is a mock of Config interface.
type MockConfig struct {
	ctrl     *gomock.Controller
	recorder *MockConfigMockRecorder
}

// MockConfigMockRecorder is the mock recorder for MockConfig.
type MockConfigMockRecorder struct {
	mock *MockConfig
}

// NewMockConfig creates a new mock instance.
func NewMockConfig(ctrl *gomock.Controller) *MockConfig {
	mock := &MockConfig{ctrl: ctrl}
	mock.recorder = &MockConfigMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfig) EXPECT() *MockConfigMockRecorder {
	return m.recorder
}

// GetDevelopmentConfig mocks base method.
func (m *MockConfig) GetDevelopmentConfig() logger.LogConfig {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDevelopmentConfig")
	ret0, _ := ret[0].(logger.LogConfig)
	return ret0
}

// GetDevelopmentConfig indicates an expected call of GetDevelopmentConfig.
func (mr *MockConfigMockRecorder) GetDevelopmentConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDevelopmentConfig", reflect.TypeOf((*MockConfig)(nil).GetDevelopmentConfig))
}

// GetProductionConfig mocks base method.
func (m *MockConfig) GetProductionConfig() logger.LogConfig {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductionConfig")
	ret0, _ := ret[0].(logger.LogConfig)
	return ret0
}

// GetProductionConfig indicates an expected call of GetProductionConfig.
func (mr *MockConfigMockRecorder) GetProductionConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductionConfig", reflect.TypeOf((*MockConfig)(nil).GetProductionConfig))
}
