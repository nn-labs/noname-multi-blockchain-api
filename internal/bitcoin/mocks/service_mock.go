// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_bitcoin is a generated GoMock package.
package mock_bitcoin

import (
	context "context"
	bitcoin "nn-blockchain-api/internal/bitcoin"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// CreateTransaction mocks base method.
func (m *MockService) CreateTransaction(ctx context.Context, dto *bitcoin.CreateRawTransactionDTO) (*bitcoin.CreatedRawTransactionDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTransaction", ctx, dto)
	ret0, _ := ret[0].(*bitcoin.CreatedRawTransactionDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTransaction indicates an expected call of CreateTransaction.
func (mr *MockServiceMockRecorder) CreateTransaction(ctx, dto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTransaction", reflect.TypeOf((*MockService)(nil).CreateTransaction), ctx, dto)
}

// CreateWallet mocks base method.
func (m *MockService) CreateWallet(ctx context.Context, dto *bitcoin.CreateWalletDTO) (*bitcoin.CreatedWalletInfoDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWallet", ctx, dto)
	ret0, _ := ret[0].(*bitcoin.CreatedWalletInfoDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWallet indicates an expected call of CreateWallet.
func (mr *MockServiceMockRecorder) CreateWallet(ctx, dto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWallet", reflect.TypeOf((*MockService)(nil).CreateWallet), ctx, dto)
}

// DecodeTransaction mocks base method.
func (m *MockService) DecodeTransaction(ctx context.Context, dto *bitcoin.DecodeRawTransactionDTO) (*bitcoin.DecodedRawTransactionDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecodeTransaction", ctx, dto)
	ret0, _ := ret[0].(*bitcoin.DecodedRawTransactionDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DecodeTransaction indicates an expected call of DecodeTransaction.
func (mr *MockServiceMockRecorder) DecodeTransaction(ctx, dto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecodeTransaction", reflect.TypeOf((*MockService)(nil).DecodeTransaction), ctx, dto)
}

// FoundForRawTransaction mocks base method.
func (m *MockService) FoundForRawTransaction(ctx context.Context, dto *bitcoin.FundForRawTransactionDTO) (*bitcoin.FundedRawTransactionDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FoundForRawTransaction", ctx, dto)
	ret0, _ := ret[0].(*bitcoin.FundedRawTransactionDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FoundForRawTransaction indicates an expected call of FoundForRawTransaction.
func (mr *MockServiceMockRecorder) FoundForRawTransaction(ctx, dto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FoundForRawTransaction", reflect.TypeOf((*MockService)(nil).FoundForRawTransaction), ctx, dto)
}

// ImportAddress mocks base method.
func (m *MockService) ImportAddress(ctx context.Context, dto *bitcoin.ImportAddressDTO) (*bitcoin.ImportAddressInfoDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportAddress", ctx, dto)
	ret0, _ := ret[0].(*bitcoin.ImportAddressInfoDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImportAddress indicates an expected call of ImportAddress.
func (mr *MockServiceMockRecorder) ImportAddress(ctx, dto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportAddress", reflect.TypeOf((*MockService)(nil).ImportAddress), ctx, dto)
}

// ListUnspent mocks base method.
func (m *MockService) ListUnspent(ctx context.Context, dto *bitcoin.ListUnspentDTO) (*bitcoin.ListUnspentInfoDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUnspent", ctx, dto)
	ret0, _ := ret[0].(*bitcoin.ListUnspentInfoDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUnspent indicates an expected call of ListUnspent.
func (mr *MockServiceMockRecorder) ListUnspent(ctx, dto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUnspent", reflect.TypeOf((*MockService)(nil).ListUnspent), ctx, dto)
}

// LoadWaller mocks base method.
func (m *MockService) LoadWaller(ctx context.Context, dto *bitcoin.LoadWalletDTO) (*bitcoin.LoadWalletInfoDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadWaller", ctx, dto)
	ret0, _ := ret[0].(*bitcoin.LoadWalletInfoDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadWaller indicates an expected call of LoadWaller.
func (mr *MockServiceMockRecorder) LoadWaller(ctx, dto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadWaller", reflect.TypeOf((*MockService)(nil).LoadWaller), ctx, dto)
}

// RescanWallet mocks base method.
func (m *MockService) RescanWallet(ctx context.Context, dto *bitcoin.RescanWalletDTO) (*bitcoin.RescanWalletInfoDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RescanWallet", ctx, dto)
	ret0, _ := ret[0].(*bitcoin.RescanWalletInfoDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RescanWallet indicates an expected call of RescanWallet.
func (mr *MockServiceMockRecorder) RescanWallet(ctx, dto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RescanWallet", reflect.TypeOf((*MockService)(nil).RescanWallet), ctx, dto)
}

// SendTransaction mocks base method.
func (m *MockService) SendTransaction(ctx context.Context, dto *bitcoin.SendRawTransactionDTO) (*bitcoin.SentRawTransactionDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendTransaction", ctx, dto)
	ret0, _ := ret[0].(*bitcoin.SentRawTransactionDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendTransaction indicates an expected call of SendTransaction.
func (mr *MockServiceMockRecorder) SendTransaction(ctx, dto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendTransaction", reflect.TypeOf((*MockService)(nil).SendTransaction), ctx, dto)
}

// SignTransaction mocks base method.
func (m *MockService) SignTransaction(ctx context.Context, dto *bitcoin.SignRawTransactionDTO) (*bitcoin.SignedRawTransactionDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignTransaction", ctx, dto)
	ret0, _ := ret[0].(*bitcoin.SignedRawTransactionDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignTransaction indicates an expected call of SignTransaction.
func (mr *MockServiceMockRecorder) SignTransaction(ctx, dto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignTransaction", reflect.TypeOf((*MockService)(nil).SignTransaction), ctx, dto)
}

// StatusNode mocks base method.
func (m *MockService) StatusNode(ctx context.Context, dto *bitcoin.StatusNodeDTO) (*bitcoin.StatusNodeInfoDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StatusNode", ctx, dto)
	ret0, _ := ret[0].(*bitcoin.StatusNodeInfoDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StatusNode indicates an expected call of StatusNode.
func (mr *MockServiceMockRecorder) StatusNode(ctx, dto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StatusNode", reflect.TypeOf((*MockService)(nil).StatusNode), ctx, dto)
}

// WalletInfo mocks base method.
func (m *MockService) WalletInfo(ctx context.Context, dto *bitcoin.WalletDTO) (*bitcoin.WalletInfoDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WalletInfo", ctx, dto)
	ret0, _ := ret[0].(*bitcoin.WalletInfoDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WalletInfo indicates an expected call of WalletInfo.
func (mr *MockServiceMockRecorder) WalletInfo(ctx, dto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WalletInfo", reflect.TypeOf((*MockService)(nil).WalletInfo), ctx, dto)
}
